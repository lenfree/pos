package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/lenfree/pos/models"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Category)
// DB Table: Plural (categories)
// Resource: Plural (Categories)
// Path: Plural (/categories)
// View Template Folder: Plural (/templates/categories/)

// CategoriesResource is the resource for the Category model
type CategoriesResource struct {
	buffalo.Resource
}

// List gets all Categories. This function is mapped to the path
// GET /categories
func (v CategoriesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	categories := &models.Categories{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Categories from the DB
	if err := q.All(categories); err != nil {
		return errors.WithStack(err)
	}

	var data []models.CategoryChildren
	for _, d := range *categories {
		category := &models.Category{}
		items := &models.Items{}
		if err := tx.Find(category, d.ID); err != nil {
			return c.Error(404, err)
		}
		if err := tx.BelongsTo(category).All(items); err != nil {
			return c.Error(404, err)
		}
		data = append(data, models.CategoryChildren{
			Category: category,
			Items:    items,
		})
	}

	// Add the paginator to the headers so clients know how to paginate.
	c.Response().Header().Set("X-Pagination", q.Paginator.String())

	return c.Render(200, r.JSON(data))
}

// Show gets the data for one Category. This function is mapped to
// the path GET /categories/{category_id}
func (v CategoriesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Item
	category := &models.Category{}
	items := &models.Items{}

	// To find the Category the parameter category_id is used.
	if err := tx.Find(category, c.Param("category_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.BelongsTo(category).All(items); err != nil {
		return c.Error(404, err)
	}

	data := &models.CategoryChildren{
		Category: category,
		Items:    items,
	}
	return c.Render(200, r.JSON(data))

}

// New default implementation. Returns a 501 not implemented
func (v CategoriesResource) New(c buffalo.Context) error {
	return c.Error(501, errors.New("not implemented"))
}

// Create adds a Category to the DB. This function is mapped to the
// path POST /categories
func (v CategoriesResource) Create(c buffalo.Context) error {
	// Allocate an empty Category
	category := &models.Category{}

	// Bind category to the html form elements
	if err := c.Bind(category); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(category)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Render errors as JSON
		return c.Render(400, r.JSON(verrs))
	}

	return c.Render(201, r.JSON(category))
}

// Edit default implementation. Returns a 501
func (v CategoriesResource) Edit(c buffalo.Context) error {
	return c.Error(404, errors.New("not implemented"))
}

// Update changes a Category in the DB. This function is mapped to
// the path PUT /categories/{category_id}
func (v CategoriesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Category
	category := &models.Category{}

	if err := tx.Find(category, c.Param("category_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Category to the html form elements
	if err := c.Bind(category); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(category)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Render errors as JSON
		return c.Render(400, r.JSON(verrs))
	}

	return c.Render(200, r.JSON(category))
}

// Destroy deletes a Category from the DB. This function is mapped
// to the path DELETE /categories/{category_id}
func (v CategoriesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Category
	category := &models.Category{}

	// To find the Category the parameter category_id is used.
	if err := tx.Find(category, c.Param("category_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(category); err != nil {
		return errors.WithStack(err)
	}

	return c.Render(200, r.JSON(category))
}
